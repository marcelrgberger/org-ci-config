name: Flutter Build and Deploy

on:
  workflow_call:
    inputs:
      repository:
        required: true
        type: string
        description: 'Repository to check out'
      branch:
        description: branch to work on
        required: true
        type: string
      working-directory:
        description: 'The root directory of the flutter app within this repository'
        default: ./
        type: string
        required: false
      release_version:
        description: 'Release version, e,g, MAJOR, MINOR, PATCH'
        required: false
        type: string
      ios_bundle_id:
        required: false
        description: Bundle-ID of the app e.g. com.test.test-app is required for Testflight and release builds
        type: string
      android_bundle_id:
        required: false
        description: Bundle-ID of the app e.g. com.test.test-app is required for Testflight and release builds
        type: string
      profile_name:
        required: false
        description: Profile name of the app is required for Testflight and release builds
        type: string
      environments:
        required: false
        description: both starts build for iOS and Android, and ios or android only the specific plattform
        default: both
        type: string

    secrets:
      sonar_token:
        required: true
        description: Required for sonar tests
      IOS_DISTRIBUTION_CERTIFICATE_BASE64:
        required: false
        description: Base64 Version of the Apple Distribution Certificate - Required for TestFlight and Release Builds
      IOS_DISTRIBUTION_CERTIFICATE_PASSWORD:
        required: false
        description: Password of Apple Distribution Certificate - Required for TestFlight and Release Builds
      IOS_GITHUB_KEYCHAIN_PASSWORD:
        required: false
        description: Password for temp keychain during build cycle - Required for TestFlight and Release Builds
      IOS_MOBILE_PROVISIONING_PROFILE_BASE64:
        required: false
        description: Base64 Version of the *.mobileprovision file
      IOS_APPSTORE_API_KEY_BASE64:
        required: false
        description: Base64 Version of API Key required for test and release build
      IOS_APPSTORE_API_KEY_ID:
        required: false
        description: Required for test and release build
      IOS_APPSTORE_API_ISSUER_ID:
        required: false
        description: Required for test and release build
      ANDROID_RELEASE_KEY:
        required: false
        description: Required for test and release build to sign bundle
      ANDROID_RELEASE_KEY_PASSWORD:
        required: false
        description: Required for test and release build to sign bundle
      ANDROID_SERVICE_ACCOUNT_JSON:
        required: false
        description: Required for test and release build to upload bundle to PlayStore
      ORGANIZATION_KEY:
        required: true
        description: SonarCloud organization key

jobs:
  determine-environment:
    name: Determine Build Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.determine_env.outputs.environment }} # Ausgabe definieren
    steps:
      - name: Determine Environment
        id: determine_env
        run: |
          get_environment() {
          local branch_name=$1
          if [[ "$branch_name" == "main" || "$branch_name" == "master" ]]; then
           echo "release"
          elif [[ "$branch_name" == "test" ]]; then
           echo "test"
          else
           echo "dev"
          fi
          }

          ENVIRONMENT=$(get_environment "${{ inputs.branch }}")
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT 

  sonar-scan:
    runs-on: macos-latest
    name: Run SonarQube Analysis
    steps:
      # Install homebrew
      - name: Install Homebrew
        shell: bash
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
          eval "$(/opt/homebrew/bin/brew shellenv)"

      # Install Sonar Scanner
      - name: Install Scanner
        shell: bash
        run: |
          brew install sonar-scanner

      # Checkout repository of the current branch
      - name: Check Out Repository ${{ inputs.repository }} And Branch ${{ inputs.branch }}
        uses: actions/checkout@v4.2.2
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.branch }}

      # Run SonarQube Analyses
      - name: Run SonarCloud Analysis
        env:
          SONAR_TOKEN: ${{ secrets.sonar_token }}
          PROJECT_KEY: 4brainsolutions_${{ github.event.repository.name }}
          BRANCH_NAME: ${{ github.ref_name }}
          ORGANIZATION_KEY: ${{secrets.ORGANIZATION_KEY}}
        run: |
          echo "Running SonarCloud Analysis with Project Key: $PROJECT_KEY, Branch Name: $BRANCH_NAME"
          sonar-scanner \
            -Dsonar.projectKey=$PROJECT_KEY \
            -Dsonar.organization=$ORGANIZATION_KEY \
            -Dsonar.token=$SONAR_TOKEN \
            -Dsonar.sources=lib,test \
            -Dsonar.exclusions=**/build/**,**/ios/**,**/android/**,**/web/**,**/example/** \
            -Dsonar.coverage.exclusions=**/test/**,**/*.g.dart \
            -Dsonar.branch.name=$BRANCH_NAME

      # Wait for SonarCloud Quality Gate status
      - name: Wait for Quality Gate
        env:
          SONAR_TOKEN: ${{ secrets.sonar_token }}
          PROJECT_KEY: 4brainsolutions_${{ github.event.repository.name }}
          BRANCH_NAME: ${{ github.ref_name }}
          ORGANIZATION_KEY: ${{secrets.ORGANIZATION_KEY}}
        run: |
          echo "Waiting for SonarCloud Quality Gate result..."
          for i in {1..10}; do
            STATUS=$(curl -s -u $SONAR_TOKEN: "https://sonarcloud.io/api/qualitygates/project_status?projectKey=4brainsolutions_${{ github.event.repository.name }}" | jq -r '.projectStatus.status')
            echo "Status response: $STATUS"
            if [ "$STATUS" == "OK" ]; then
              echo "Quality Gate passed: $STATUS"
              exit 0
            elif [ "$STATUS" == "ERROR" ]; then
              echo "Quality Gate failed: $STATUS"
              exit 1
            elif [ "$STATUS" == "NONE" ] || [ "$STATUS" == "null" ]; then
              echo "This is the first run or status is null. Run analysis again..."
              sleep 60
              PROJECT_KEY=4brainsolutions_${REPO_NAME} # Dynamisch generierter Projekt-Key
               echo "Running SonarCloud Analysis with Project Key: $PROJECT_KEY"
               sonar-scanner \
                 -Dsonar.projectKey=$PROJECT_KEY \
                 -Dsonar.organization=4brainsolutions \
                 -Dsonar.token=$SONAR_TOKEN \
                 -Dsonar.sources=lib,test \
                 -Dsonar.inclusions=lib/**,test/**,pubspec.yaml,pubspec.lock,analysis_options.yaml \
                 -Dsonar.exclusions=**/build/**,**/ios/**,**/android/**,**/web/**,**/example/** \
                 -Dsonar.coverage.exclusions=**/test/**,**/*.g.dart \
                 -Dsonar.branch.name=$BRANCH_NAME
                 exit 0
            else
              echo "Quality Gate not ready yet (attempt $i)..."
              sleep 10
            fi
            done
            echo "Timeout waiting for Quality Gate status"
            exit 1
        shell: bash


  set-build-version:
    name: Set new Buildnumber for Test-Release
    if: inputs.release_version == 'test'
    runs-on: ubuntu-latest
    needs: [ sonar-scan ]
    steps:
      # Checkout repository of the current branch
      - name: Check Out Repository ${{ inputs.repository }} And Branch ${{ inputs.branch }}
        uses: actions/checkout@v4.2.2
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.branch }}
      # Increase Build-Nr.
      - name: Increment build number
        shell: bash
        working-directory: ./
        run: |
          # Datei definieren
          FILE="pubspec.yaml"
          
          # Aktuelle Version extrahieren
          VERSION=$(grep '^version:' $FILE | awk '{print $2}')
          APP_VERSION=$(echo $VERSION | cut -d '+' -f1)
          BUILD_NUMBER=$(echo $VERSION | cut -d '+' -f2)
          
          # Build-Nummer erhÃ¶hen
          NEW_BUILD_NUMBER=$((BUILD_NUMBER + 1))
          NEW_VERSION="${APP_VERSION}+${NEW_BUILD_NUMBER}"
          
          # pubspec.yaml aktualisieren
          sed -i "s/^version: .*/version: $NEW_VERSION/" $FILE
          
          # Version in GitHub-Umgebung speichern
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      #Commit New Build-Nr. to Repo
      - name: Commit and push updated build number

        shell: bash
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git add pubspec.yaml
          git commit -m "Testflight mit neuer Build-Nr. ${{ env.NEW_VERSION }} erstellt."
          git push origin ${{ inputs.branch }}

  set-release-version:
    name: Set Release Version
    runs-on: ubuntu-latest
    if: inputs.release_version != 'test'
    needs: [ sonar-scan ]
    steps:
      # Checkout repository of the current branch
      - name: Check Out Repository ${{ inputs.repository }} And Branch ${{ inputs.branch }}
        uses: actions/checkout@v4.2.2
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.branch }}
      # Increment version for release
      - name: Increment version
        working-directory: ./
        run: |
          # Datei definieren
          FILE="pubspec.yaml"
          
          # Aktuelle Version auslesen
          VERSION=$(grep '^version:' $FILE | awk '{print $2}')
          APP_VERSION=$(echo $VERSION | cut -d '+' -f1)
          BUILD_NUMBER=$(echo $VERSION | cut -d '+' -f2)
          
          # App-Version in MAJOR.MINOR.PATCH aufteilen
          MAJOR=$(echo $APP_VERSION | cut -d '.' -f1)
          MINOR=$(echo $APP_VERSION | cut -d '.' -f2)
          PATCH=$(echo $APP_VERSION | cut -d '.' -f3)
          
          # Eingabe prÃ¼fen und Version erhÃ¶hen
          case "${INPUT_RELEASE_VERSION}" in
          MAJOR)
          MAJOR=$((MAJOR + 1))
          MINOR=0
          PATCH=0
          ;;
          MINOR)
          MINOR=$((MINOR + 1))
          PATCH=0
          ;;
          PATCH)
          PATCH=$((PATCH + 1))
          ;;
          esac
          
          # Neue Versionsnummer zusammensetzen
          NEW_APP_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          NEW_BUILD_NUMBER=1  # Reset der Build-Nummer
          NEW_VERSION="${NEW_APP_VERSION}+${NEW_BUILD_NUMBER}"

          # Datei aktualisieren
          sed -i "s/^version:.*/version: $NEW_VERSION/" $FILE
          
          # Neue App-Version in GitHub-Umgebungsvariable speichern
          echo "NEW_APP_VERSION=$NEW_APP_VERSION" >> $GITHUB_ENV

      # Commit and tag release
      - name: Commit and push updated version
        if: inputs.release_version != 'test'
        shell: bash
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git add pubspec.yaml
          git commit -m "Neues Release Version ${{ env.NEW_APP_VERSION }} erstellt"
          it tag -a "v${{ env.NEW_APP_VERSION }}" -m "Release v${{ env.NEW_APP_VERSION }}"
          git push origin ${{ inputs.branch }}

      # Cache target folder
      - name: Cache Target Folder
        uses: actions/cache@v3
        with:
          path: .
          key: ${{ env.CACHE_KEY }}

  wait:
    name: Waiting for Version Tags
    needs: [ determine-environment, sonar-scan ]
    runs-on: ubuntu-latest
    steps:
      - name: Waiting...
        run: |
          sleep 60
        shell: bash

  ios-build:
    name: iOS Build and Deploy to AppStore
    if: (inputs.environments == 'both' || inputs.environments == 'ios') && needs.determine-environment.outputs.environment != 'dev' && inputs.release_version != ''
    runs-on: macos-latest
    needs: [ wait ]
    steps:
      # Check Xcode Version
      - name: Check installed Xcode Version
        run: /usr/bin/xcodebuild -version
        shell: bash
        # Checkout repository of the current branch
      - name: Check Out Repository ${{ inputs.repository }} And Branch ${{ inputs.branch }}
        uses: actions/checkout@v4.2.2
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.branch }}

      # Check if flutter is installed
      - name: Check flutter found
        id: check_flutter
        shell: bash
        run: |
          if flutter --version; then
              echo "installed=true" >> "$GITHUB_OUTPUT"
          else
              echo "installed=false" >> "$GITHUB_OUTPUT"
          fi
      #Setup flutter
      - name: Setup flutter
        if: steps.check_flutter.outputs.installed == 'false'
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          cache: true

      # Install app dependencies
      - name: Install Dependencies
        run: |
          flutter clean
          flutter pub get
        shell: bash

      - name: Add Apple Certificates and Provisioning Profiles
        if: inputs.release_version != 'dev'
        shell: bash
        env:
          IOS_DISTRIBUTION_CERTIFICATE_BASE64: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE_BASE64 }}
          IOS_DISTRIBUTION_CERTIFICATE_PASSWORD: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE_PASSWORD }}
          IOS_MOBILE_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_MOBILE_PROVISIONING_PROFILE_BASE64 }}
          IOS_GITHUB_KEYCHAIN_PASSWORD: ${{ secrets.IOS_GITHUB_KEYCHAIN_PASSWORD }}
          # Slight modification in the script from https://docs.github.com/en/actions/deployment/deploying-xcode-applications/installing-an-apple-certificate-on-macos-runners-for-xcode-development
          # that adds the uuid to the mobile provision so xcode can find it
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          PP_PATH=$RUNNER_TEMP/temp.mobileprovision
          
          echo "Extract certificate and profile from secret..."
          # import certificate and provisioning profile from secrets
          echo -n "$IOS_DISTRIBUTION_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$IOS_MOBILE_PROVISIONING_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          
          # create temporary keychain
          echo "Create temporary keychain ..."
          security create-keychain -p "$IOS_GITHUB_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$IOS_GITHUB_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # import certificate to keychain
          echo "Import distribution certificate..."
          security import $CERTIFICATE_PATH -P "$IOS_DISTRIBUTION_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          security find-identity -v
          echo "Distribution certificate imported."
          
          echo "Rename provisioning profile..."     
          # use uuid for the name of provisioning profile
          UUID=$(/usr/libexec/PlistBuddy -c "Print UUID" /dev/stdin <<< $(/usr/bin/security cms -D -i $PP_PATH)) || { echo "Failed to extract UUID"; exit 1; }
          
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision
          
          echo "Provided provisioning profile: "
          security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision
          
          echo "Add Apple Certificates and Provisioning Profiles completed!"

        # List installed profiles
      - name: List profiles
        run: |
          echo "Installed Provisioning Profile"
          cd ~/Library/MobileDevice/Provisioning\ Profiles && ls
        shell: bash

      # Set the export options in ExportOptions.plist
      - name: Set ExportOptions
        if: inputs.release_version != 'dev'
        shell: bash
        run: |
          # Bedingung prÃ¼fen
          if [[ "${{ inputs.release_version }}" == "test" ]]; then
            TESTFLIGHT_VALUE="true"
          else
            TESTFLIGHT_VALUE="false"
          fi
          
          # Platzhalter-Werte definieren
          BUNDLE_ID="${{ inputs.ios_bundle_id }}"
          PROFILE="${{ inputs.profile_name }}"
          
          # ExportOptions.plist im Root-Verzeichnis erstellen
          cat <<EOF > ./ExportOptions.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>destination</key>
            <string>export</string>
            <key>generateAppStoreInformation</key>
            <false/>
            <key>manageAppVersionAndBuildNumber</key>
            <true/>
            <key>method</key>
            <string>app-store-connect</string>
            <key>signingCertificate</key>
            <string>Apple Distribution</string>
            <key>signingStyle</key>
            <string>manual</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>${BUNDLE_ID}</key>
              <string>${PROFILE}</string>
            </dict>
            <key>stripSwiftSymbols</key>
            <true/>
            <key>teamID</key>
            <string>GSVG76T69X</string>
            <key>testFlightInternalTestingOnly</key>
            <${TESTFLIGHT_VALUE}/>
            <key>uploadSymbols</key>
            <true/>
            </dict>
          </plist>
          EOF
          echo "Kontrollausgabe der Datei ExportOptions.plist:"
          cat ./ExportOptions.plist
          echo "Inhalt des Verzeichnisses:"
          ls -al
          echo "ExportOptions.plist wurde erfolgreich erstellt."

      # Create build for test flight
      - name: Build ipa for Test-Flight
        if: inputs.release_version == 'test'
        run: |
          echo "Starte Testflight build ..."
          flutter build ipa --release --export-options-plist=./ExportOptions.plist
        shell: bash
        working-directory: ./

      # Create build for Release
      - name: Build ipa for Release
        if: inputs.release_version != 'test'
        run: |
          echo "Starte Release build ..."
          flutter build ipa --release --export-options-plist=./ExportOptions.plist
        shell: bash
        working-directory: ./

      # Decode API Key from global secrets
      - name: Decode AppStore API Key
        if: inputs.release_version != 'dev'
        run: |
          mkdir -p ~/.appstoreconnect/private_keys
          echo "${{ secrets.IOS_APPSTORE_API_KEY_BASE64 }}" | base64 --decode > ~/.appstoreconnect/private_keys/AuthKey_${{ secrets.IOS_APPSTORE_API_KEY_ID }}.p8

      # Upload to AppStore
      - name: Upload IPA to AppStore Connect
        if: inputs.release_version != 'dev'
        env:
          IOS_APPSTORE_API_KEY_ID: ${{ secrets.IOS_APPSTORE_API_KEY_ID }}
          IOS_APPSTORE_API_ISSUER_ID: ${{ secrets.IOS_APPSTORE_API_ISSUER_ID }}
        run: |
          xcrun altool --upload-app \
            --type ios \
            -f build/ios/ipa/*.ipa \
            --apiKey $IOS_APPSTORE_API_KEY_ID \
            --apiIssuer $IOS_APPSTORE_API_ISSUER_ID

      # Development Build without artifact
      - name: Development build
        if: inputs.release_version == 'dev'
        run: |
          flutter build ios --no-codesign
        shell: bash

      # Remote keys and profile
      - name: Clean up keychain and provisioning profile
        if: ${{ always() && inputs.release_version != 'dev'}}
        run: |
          echo "Keychain and Provisioning Profile Cleanup ..."
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision

  android-build:
    name: Android Build and Deploy to PlayStore
    runs-on: ubuntu-latest
    needs: [ wait ]
    if: (inputs.environments == 'both' || inputs.environments == 'android') && needs.determine-environment.outputs.environment != 'dev' && inputs.release_version != ''
    steps:
      # Checkout repository of the current branch
      - name: Check Out Repository ${{ inputs.repository }} And Branch ${{ inputs.branch }}
        uses: actions/checkout@v4.2.2
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.branch }}

      # Check Java Version
      - name: Check java found
        id: check_java
        shell: bash
        run: |
          if java --version; then
              echo "installed=true" >> "$GITHUB_OUTPUT"
          else
              echo "installed=false" >> "$GITHUB_OUTPUT"
          fi

      # Install Java
      - name: Install java
        if: steps.check_java.outputs.installed == 'false'
        uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: "17.x"
          cache: "gradle"

      # Check if flutter is installed
      - name: Check flutter found
        id: check_flutter
        shell: bash
        run: |
          if flutter --version; then
              echo "installed=true" >> "$GITHUB_OUTPUT"
          else
              echo "installed=false" >> "$GITHUB_OUTPUT"
          fi
      #Setup flutter
      - name: Setup flutter
        if: steps.check_flutter.outputs.installed == 'false'
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          cache: true

      # Install app dependencies
      - name: Install Dependencies
        run: |
          flutter clean
          flutter pub get
        shell: bash

      # Decode KeyStore
      - name: Decode keystore and create jks and properties file for signing the app
        if: inputs.release_version != 'dev'
        shell: bash
        run: |
          echo "$KEYSTORE" | base64 --decode > app/keystore.jks
          echo "storeFile=keystore.jks" >> key.properties
          echo "keyAlias=upload" >> key.properties
          echo "storePassword=$KEYSTORE_PASSWORD" >> key.properties
          echo "keyPassword=$KEYSTORE_PASSWORD" >> key.properties
          ls -al
          ls -al app/
          cat
        env:
          KEYSTORE: ${{ secrets.ANDROID_RELEASE_KEY }}
          KEYSTORE_PASSWORD: ${{ secrets.ANDROID_RELEASE_KEY_PASSWORD }}
        working-directory: ${{ inputs.working-directory }}/android

      # Dev Build for integration test only
      - name: Android Build without release
        if: inputs.release_version == 'dev'
        shell: bash
        working-directory: ${{ inputs.working-directory }}
        run: |
          flutter build apk    

      # Test Build for integration test only
      - name: Android Build with Test Release
        if: inputs.release_version == 'test'
        working-directory: ${{ inputs.working-directory }}
        shell: bash
        run: |
          flutter build appbundle --debug

      # Release Build
      - name: Android Release Build
        if: ${{ inputs.release_version != 'test' && inputs.release_version != 'dev'}}
        shell: bash
        working-directory: ${{ inputs.working-directory }}
        run: |
          flutter build appbundle --release

      # Release to PlayStore
      - name: Upload Release to PlayStore
        #if: ${{ inputs.release_version != 'test' && inputs.release_version != 'dev'}}
        if: false
        uses: 4brainsolutions/org-ci-config/.github/actions/upload-playstore-action@main
        with:
          service_account_json: ${{ secrets.ANDROID_SERVICE_ACCOUNT_JSON }}
          package_name: ${{ inputs.android_bundle_id }}
          aab_file_path: "./build/app/outputs/bundle/release/app-release.aab"
          track: "production"
          release_status: "completed"

      # Upload to artifacts
      - name: Upload Testflight Debug AppBundle
        if: ${{ inputs.release_version == 'test'}}
        uses: actions/upload-artifact@v4.4.3
        with:
          name: ${{ inputs.android_bundle_id }}
          path: ./build/app/outputs/bundle/debug/app-debug.aab
          retention-days: 1

      # Test-Build to PlayStore
      - name: Upload Test-Build to PlayStore
        #if: ${{ inputs.release_version == 'test'}}
        if: false
        uses: 4brainsolutions/org-ci-config/.github/actions/upload-playstore-action@main
        with:
          service_account_json: ${{ secrets.ANDROID_SERVICE_ACCOUNT_JSON }}
          package_name: ${{ inputs.android_bundle_id }}
          aab_file_path: "./build/app/outputs/bundle/debug/app-debug.aab"
          track: "internal"
          release_status: "draft"